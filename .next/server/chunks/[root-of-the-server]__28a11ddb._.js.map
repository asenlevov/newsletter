{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///Users/asen/Desktop/PolygrAI/Email%20Template%20Builder/src/lib/gemini.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport * as cheerio from \"cheerio\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\n\nexport const gemini = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\nexport async function fetchAndParseURL(url: string) {\n  try {\n    const response = await fetch(url);\n    const html = await response.text();\n    const $ = cheerio.load(html);\n\n    // Remove script and style elements\n    $(\"script, style\").remove();\n\n    // Get the clean text\n    const text = $(\"body\").text();\n\n    return text;\n  } catch (error) {\n    console.error(\"Error fetching or parsing URL:\", error);\n    return null;\n  }\n} "],"names":[],"mappings":";;;;;;;;;AACA;AAAA;;;AAEA,MAAM,QAAQ,IAAI,mBAAmB,QAAQ,GAAG,CAAC,cAAc;AAExD,MAAM,SAAS,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAmB;AAEpE,eAAe,iBAAiB,GAAW;IAChD,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,MAAM,IAAI,yJAAA,CAAA,OAAY,CAAC;QAEvB,mCAAmC;QACnC,EAAE,iBAAiB,MAAM;QAEzB,qBAAqB;QACrB,MAAM,OAAO,EAAE,QAAQ,IAAI;QAE3B,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///Users/asen/Desktop/PolygrAI/Email%20Template%20Builder/src/app/api/generate/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport fs from 'fs'\nimport path from 'path'\nimport { gemini, fetchAndParseURL } from '@/lib/gemini'\n\n// Helper function to format the \"Latest Insights\" and \"Industry Buzz\" sections\nconst formatInsights = (insights: { url: string; title: string; excerpt: string; image: string }[]) => {\n  return insights\n    .map(\n      (insight) => `\n    <tr>\n      <td style=\"padding-bottom: 20px;\">\n        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n          <tr>\n            <td valign=\"top\" width=\"150\" style=\"padding-right: 20px;\">\n              <img src=\"${insight.image}\" alt=\"${insight.title}\" width=\"130\" style=\"width: 130px; max-width: 100%; border-radius: 8px;\">\n            </td>\n            <td valign=\"top\">\n              <h3 style=\"font-size: 18px; margin-bottom: 5px;\">${insight.title}</h3>\n              <p style=\"margin-bottom: 10px; font-size: 14px;\">${insight.excerpt}</p>\n              <a href=\"${insight.url}\" style=\"font-weight: bold; color: #004aad;\">Read More &rarr;</a>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  `\n    )\n    .join('')\n}\n\n// Helper function to format the \"Product Updates\" section\nconst formatProductUpdates = (updates: string) => {\n  // A simple example of processing the raw text.\n  // In a real application, this would involve more sophisticated LLM-based processing.\n  return updates\n    .split('\\n')\n    .map(\n      (update) => `\n    <tr><td style=\"padding-bottom: 12px;\"><p style=\"font-size: 15px; color: #4a5568;\">${update}</p></td></tr>\n  `\n    )\n    .join('')\n}\n\n// Helper function to format the \"Success In Focus\" section\nconst formatSuccessStory = (story: {\n  enabled: boolean\n  quote: string\n  person: string\n  image: string\n  link: string\n}) => {\n  if (!story.enabled) {\n    return ''\n  }\n  return `\n    <tr class=\"divider\"><td height=\"1\"></td></tr>\n    <tr>\n      <td class=\"section\" style=\"background-color: #f4f5f7;\">\n        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"two-column\">\n          <tr>\n            <td class=\"column\" width=\"30%\" valign=\"top\" style=\"padding-right: 15px;\">\n              <img src=\"${story.image}\" alt=\"Portrait of ${story.person}\" width=\"150\" style=\"width: 150px; max-width: 100%; border-radius: 8px;\">\n            </td>\n            <td class=\"column column-last\" width=\"70%\" valign=\"middle\">\n              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n                <tr>\n                  <td>\n                    <h2 id=\"story\" style=\"margin-bottom: 10px;\">Success in Focus</h2>\n                    <p style=\"font-style: italic; margin-bottom: 10px;\">\"${story.quote}\"</p>\n                    <p style=\"font-weight: bold;\">${story.person}</p>\n                    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"margin-top: 15px;\">\n                      <tr>\n                        <td align=\"center\" class=\"button-td\">\n                          <a href=\"${story.link}\" class=\"button-a\" style=\"color: #ffffff !important; text-decoration: none !important; font-size: 14px; padding: 10px 20px;\">Read Their Story</a>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  `\n}\n\n// Helper function to process a URL with Gemini\nasync function processURL(url: string) {\n  const textContent = await fetchAndParseURL(url)\n  if (!textContent) {\n    return {\n      url,\n      title: 'Error: Could not fetch content',\n      excerpt: '',\n      image: '',\n    }\n  }\n\n  const prompt = `\n    Based on the following text content from a webpage, please provide a concise, one-sentence excerpt, the original title of the page, and a URL to a relevant image.\n\n    Format your response as a JSON object with the following keys: \"title\", \"excerpt\", and \"image\".\n\n    Here is the text content:\n    ---\n    ${textContent.substring(0, 8000)}\n    ---\n  `\n\n  try {\n    const result = await gemini.generateContent(prompt)\n    const response = await result.response\n    const jsonString = response.text().replace(/```json|```/g, '').trim()\n    const parsed = JSON.parse(jsonString)\n    return {\n      url,\n      title: parsed.title,\n      excerpt: parsed.excerpt,\n      image: parsed.image,\n    }\n  } catch (error) {\n    console.error('Error processing URL with Gemini:', error)\n    return {\n      url,\n      title: 'Error: Could not process content',\n      excerpt: '',\n      image: '',\n    }\n  }\n}\n\n// Helper function to process text with Gemini\nasync function processText(text: string, prompt: string) {\n  try {\n    const result = await gemini.generateContent(`${prompt}\\n\\n---\\n\\n${text}`)\n    const response = await result.response\n    return response.text()\n  } catch (error) {\n    console.error('Error processing text with Gemini:', error)\n    return `Error: Could not process text - ${text}`\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n\n    const insightsPromises = body.latestInsights.map(processURL)\n    const buzzPromises = body.industryBuzz.map(processURL)\n\n    const productUpdatesPrompt = `\n      Please rewrite and reformat the following unstructured text, which consists of GitHub commit comments, into a clean, user-friendly list. \n      Improve the writing style to be more engaging and less technical. \n      Categorize each update with a relevant emoji (e.g., âœ¨, ðŸ“ˆ, ðŸ”§).\n      Each item should be on a new line.\n    `\n    const tipOfTheWeekPrompt = `\n      Please rewrite the following text to be more clear, concise, and engaging.\n    `\n\n    const [latestInsights, industryBuzz, processedProductUpdates, processedTipOfTheWeek] = await Promise.all([\n      Promise.all(insightsPromises),\n      Promise.all(buzzPromises),\n      processText(body.productUpdates, productUpdatesPrompt),\n      processText(body.tipOfTheWeek, tipOfTheWeekPrompt),\n    ])\n\n    const templatePath = path.join(process.cwd(), 'public', 'newsletter_template.html')\n    let template = fs.readFileSync(templatePath, 'utf8')\n\n    template = template.replace('<!-- LATEST_INSIGHTS_CONTENT -->', formatInsights(latestInsights))\n    template = template.replace('<!-- PRODUCT_UPDATES_CONTENT -->', formatProductUpdates(processedProductUpdates))\n    template = template.replace('<!-- CUSTOMER_STORY_CONTENT -->', formatSuccessStory(body.successStory))\n    template = template.replace('<!-- INDUSTRY_BUZZ_CONTENT -->', formatInsights(industryBuzz))\n    template = template.replace(\n      '<!-- COUNTERS_USERS_CONTENT -->',\n      `<h2 style=\"font-size: 28px; font-weight: bold; color: #004aad;\">${body.counters.users}</h2>`\n    )\n    template = template.replace(\n      '<!-- COUNTERS_INTERVIEWS_CONTENT -->',\n      `<h2 style=\"font-size: 28px; font-weight: bold; color: #004aad;\">${body.counters.interviews}</h2>`\n    )\n    template = template.replace(\n      '<!-- COUNTERS_HOURS_CONTENT -->',\n      `<h2 style=\"font-size: 28px; font-weight: bold; color: #004aad;\">${body.counters.hours}</h2>`\n    )\n    template = template.replace('<!-- TIP_OF_THE_WEEK_CONTENT -->', `<p>${processedTipOfTheWeek}</p>`)\n    template = template.replace(\n      \"<!-- WHATS_NEXT_CONTENT -->\",\n      `<p>${body.whatsNext}</p>`\n    )\n\n    return NextResponse.json({ html: template })\n  } catch (error) {\n    console.error(error)\n    return NextResponse.json({ message: 'Error generating email' }, { status: 500 })\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}